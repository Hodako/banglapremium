// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  customer
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(customer)
  orders        Order[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  imageHint   String?
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  longDescription String?
  price           Decimal   @db.Decimal(10, 2)
  originalPrice   Decimal?  @db.Decimal(10, 2)
  imageUrl        String?
  imageHint       String?
  isFeatured      Boolean   @default(false)
  isBestSelling   Boolean   @default(false)
  releaseDate     DateTime?
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  orderItems      OrderItem[]
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("products")
}

enum OrderStatus {
  Pending
  Processing
  Completed
  Failed
  Delivered
}

model Order {
  id            String      @id @default(cuid())
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(Pending)
  transactionId String?
  items         OrderItem[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id             String  @id @default(cuid())
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        String
  product        Product @relation(fields: [productId], references: [id])
  productId      String
  quantity       Int
  recipientEmail String?
  price          Decimal @db.Decimal(10, 2) // Price at the time of purchase

  @@map("order_items")
}
